version: '3.8'

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "${NGINX_PORT}:80"
    networks:
      - boppop_network
    depends_on:
      fastapi:
        condition: service_healthy
      frontend:
        condition: service_healthy

  fastapi:
    build:
      context: ./api2
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - boppop_network
    environment:
      - HOST_IP=${HOST_IP}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${HOST_IP}:${BACKEND_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: uvicorn main:app --host 0.0.0.0 --port ${BACKEND_PORT}

  frontend:
    build:
      context: ./app
      dockerfile: Dockerfile
    networks:
      - boppop_network
    environment:
      - HOST_IP=${HOST_IP}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - NEXT_PUBLIC_API_BASE_URL=${API_BASE_URL}
      - NEXT_PUBLIC_API_URL=${API_URL}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_PORT}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      fastapi:
        condition: service_healthy

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=boppop_user
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api2/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: ["postgres", "-c", "listen_addresses=*"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - boppop_network

  redis:
    image: redis:alpine
    networks:
      - boppop_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  celery_worker:
    build:
      context: ./api2
      dockerfile: Dockerfile
    command: >
      bash -c "
        sleep 5 &&
        celery -A core.celery worker --loglevel=info
      "
    networks:
      - boppop_network
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=boppop_user
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      fastapi:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery_beat:
    build:
      context: ./api2
      dockerfile: Dockerfile
    command: >
      bash -c "
        sleep 10 &&
        celery -A core.celery beat --loglevel=info
      "
    networks:
      - boppop_network
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=boppop_user
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      celery_worker:
        condition: service_started

networks:
  boppop_network:
    driver: bridge

volumes:
  postgres_data: